{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Brian\\\\Documents\\\\GitHub\\\\User-Onboarding\\\\user-onboarding\\\\src\\\\Form.js\";\nimport React, { useState, useEffect } from 'react';\nimport * as Yup from 'yup'; // yup.reach will allow us to \"reach\" into the schema and test only one part.\n// We give reach the schema as the first argument, and the key we want to test as the second.\n\nyup.reach(formSchema, event.target.name) //we can then run validate using the value\n.validate(event.target.value) // if the validation is successful, we can clear the error message\n.then(valid => {\n  setErrors({ ...errors,\n    [event.target.name]: \"\"\n  });\n})\n/* if the validation is unsuccessful, we can set the error message to the message \r\n  returned from yup (that we created in our schema) */\n.catch(err => {\n  setErrors({ ...errors,\n    [event.target.name]: err.errors[0]\n  });\n}); // Wether or not our validation was successful, we will still set the state to the new value as the user is typing\n\nsetFormState({ ...formState,\n  [ev.target.name]: e.target.value\n});\n\nconst Form = props => {\n  // const {inputForms, setInputForms} = props;\n  const [inputForm, setInputForm] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    terms: false\n  });\n\n  const handleChange = event => {\n    setInputForm({ ...inputForm,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault(); // setInputForms([...inputForms, { ...inputForm, id: Date.now() }]);\n\n    setInputForm([{\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      terms: false\n    }]);\n  };\n\n  const formSchema = Yup.object().shape({\n    email: Yup.string().email(\"Must be a valid email address.\").required(\"Must include email address.\"),\n    password: Yup.string().min(6, \"Passwords must be at least 6 characters long.\").required(\"Password is Required\"),\n    terms: Yup.boolean().oneOf([true], \"You must accept Terms and Conditions\")\n  });\n  const [errors, setErrors] = useState({\n    email: \"\",\n    password: \"\",\n    terms: \"\"\n  });\n\n  const inputChange = event => {\n    event.persist();\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 1\n    }\n  }, \"Name\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    value: inputForm.name,\n    onChange: event => handleChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 1\n    }\n  }, \"Email\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"email\",\n    name: \"email\",\n    value: inputForm.email,\n    onChange: event => handleChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 1\n    }\n  }, \"Password\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    name: \"password\",\n    value: inputForm.password,\n    onChange: event => handleChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 1\n    }\n  }, \"Click here if you agree to the T.O.S:\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    name: \"terms\",\n    value: inputForm.terms,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 1\n    }\n  }, \"Submit\"));\n};\n\nexport default Form;","map":{"version":3,"sources":["C:/Users/Brian/Documents/GitHub/User-Onboarding/user-onboarding/src/Form.js"],"names":["React","useState","useEffect","Yup","yup","reach","formSchema","event","target","name","validate","value","then","valid","setErrors","errors","catch","err","setFormState","formState","ev","e","Form","props","inputForm","setInputForm","email","password","terms","handleChange","handleSubmit","preventDefault","object","shape","string","required","min","boolean","oneOf","inputChange","persist"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport * as Yup from 'yup';\r\n\r\n\r\n    // yup.reach will allow us to \"reach\" into the schema and test only one part.\r\n    // We give reach the schema as the first argument, and the key we want to test as the second.\r\n    yup \r\n      .reach(formSchema, event.target.name)\r\n      //we can then run validate using the value\r\n      .validate(event.target.value)\r\n      // if the validation is successful, we can clear the error message\r\n      .then(valid => {\r\n        setErrors({\r\n          ...errors,\r\n          [event.target.name]: \"\"\r\n        });\r\n      })\r\n      /* if the validation is unsuccessful, we can set the error message to the message \r\n        returned from yup (that we created in our schema) */\r\n      .catch(err => {\r\n        setErrors({\r\n          ...errors,\r\n          [event.target.name]: err.errors[0]\r\n        });\r\n      });\r\n\r\n    // Wether or not our validation was successful, we will still set the state to the new value as the user is typing\r\n    setFormState({\r\n      ...formState,\r\n      [ev.target.name]: e.target.value\r\n    });\r\n  \r\n\r\n\r\nconst Form = (props) => {\r\n\r\n    \r\n    // const {inputForms, setInputForms} = props;\r\n\r\n\r\n    const [inputForm, setInputForm] = useState({name: \"\", email: \"\", password: \"\", terms: false})\r\n    \r\n    const handleChange = event => {\r\n\r\n        setInputForm({...inputForm, [event.target.name]: event.target.value});\r\n    }\r\n\r\n    const handleSubmit = event => {\r\n\r\n        event.preventDefault();\r\n        // setInputForms([...inputForms, { ...inputForm, id: Date.now() }]);\r\n        setInputForm([{name: \"\", email: \"\", password: \"\", terms: false}]);\r\n\r\n    } \r\n\r\n\r\n\r\n    const formSchema = Yup.object().shape({\r\n        email: Yup\r\n          .string()\r\n          .email(\"Must be a valid email address.\")\r\n          .required(\"Must include email address.\"),\r\n        password: Yup\r\n          .string()\r\n          .min(6, \"Passwords must be at least 6 characters long.\")\r\n          .required(\"Password is Required\"),\r\n        terms: Yup\r\n          .boolean()\r\n          .oneOf([true], \"You must accept Terms and Conditions\")\r\n      });\r\n    \r\n      const [errors, setErrors] = useState({\r\n        email: \"\",\r\n        password: \"\",\r\n        terms: \"\"\r\n      });\r\n    \r\n      const inputChange = event => {\r\n       \r\n        event.persist();\r\n    \r\n    }\r\n    \r\n\r\nreturn (\r\n\r\n<form onSubmit={handleSubmit}>\r\n\r\n<label> \r\n    Name\r\n    <input type=\"text\" name=\"name\" value={inputForm.name} onChange={event => handleChange(event)} />\r\n</label>\r\n\r\n<label> \r\n    Email\r\n    <input type=\"email\" name=\"email\" value={inputForm.email} onChange={event => handleChange(event)} />\r\n</label>\r\n\r\n<label> \r\n    Password\r\n    <input type=\"password\" name=\"password\" value={inputForm.password} onChange={event => handleChange(event)} />\r\n</label>\r\n\r\n<label> \r\n    Click here if you agree to the T.O.S:\r\n    <input type=\"checkbox\" name=\"terms\"  value={inputForm.terms} onChange={handleChange} />\r\n</label>\r\n\r\n<button>Submit</button>\r\n\r\n</form>\r\n\r\n\r\n)\r\n\r\n\r\n\r\n}\r\n\r\nexport default Form;"]},"metadata":{},"sourceType":"module"}