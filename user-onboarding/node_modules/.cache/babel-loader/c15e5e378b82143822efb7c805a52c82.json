{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Brian\\\\Documents\\\\GitHub\\\\User-Onboarding\\\\user-onboarding\\\\src\\\\Form.js\";\nimport React, { useState, useEffect } from 'react';\nimport * as Yup from 'yup';\nimport axios from \"axios\";\n\nconst Form = props => {\n  const [post, setPost] = useState([]); // const {inputForms, setInputForms} = props;\n\n  const [inputForm, setInputForm] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    terms: \"\"\n  }); // const handleChange = event => {\n  //     setInputForm({...inputForm, [event.target.name]: event.target.value});\n  // }\n\n  const handleSubmit = event => {\n    event.preventDefault(); // setInputForms([...inputForms, { ...inputForm, id: Date.now() }]);\n    // setInputForm([{name: \"\", email: \"\", password: \"\", terms: \"\"}]);\n\n    axios.post(\"https://reqres.in/api/users\", inputForm).then();\n  };\n\n  const formSchema = Yup.object().shape({\n    name: Yup.string().required(\"Must input a Name.\"),\n    email: Yup.string().email(\"Must be a valid email address.\").required(\"Must include email address.\"),\n    password: Yup.string().min(6, \"Passwords must be at least 6 characters long.\").required(\"Password is Required\"),\n    terms: Yup.boolean().oneOf([true], \"You must accept Terms and Conditions\")\n  });\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  const [errors, setErrors] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    terms: \"\"\n  });\n\n  const inputChange = event => {\n    event.persist();\n    const newFormData = { ...inputForm,\n      [event.target.name]: event.target.type === \"checkbox\" ? event.target.checked : event.target.value\n    };\n    validateChange(event);\n    setInputForm(newFormData);\n  };\n\n  useEffect(() => {\n    formSchema.isValid(inputForm).then(valid => {\n      setIsButtonDisabled(!valid);\n    });\n  }, [inputForm]);\n\n  const validateChange = event => {\n    Yup.reach(formSchema, event.target.name).validate(event.target.value).then(valid => {\n      setErrors({ ...errors,\n        [event.target.name]: \"\"\n      });\n    }).catch(err => setErrors({ ...errors,\n      [event.target.name]: err.errors[0]\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 1\n    }\n  }, \"Name\", /*#__PURE__*/React.createElement(\"input\", {\n    id: \"name\",\n    type: \"text\",\n    name: \"name\",\n    value: inputForm.name,\n    onChange: inputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }), errors.name.length > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 32\n    }\n  }, errors.name) : null), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 1\n    }\n  }, \"Email\", /*#__PURE__*/React.createElement(\"input\", {\n    id: \"email\",\n    type: \"email\",\n    name: \"email\",\n    value: inputForm.email,\n    onChange: inputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }), errors.email.length > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 33\n    }\n  }, errors.email) : null), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"passwoerd\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 1\n    }\n  }, \"Password\", /*#__PURE__*/React.createElement(\"input\", {\n    id: \"password\",\n    type: \"password\",\n    name: \"password\",\n    value: inputForm.password,\n    onChange: inputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }), errors.password.length > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 36\n    }\n  }, errors.password) : null), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"terms\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 1\n    }\n  }, \"Click here if you agree to the T.O.S:\", /*#__PURE__*/React.createElement(\"input\", {\n    id: \"terms\",\n    type: \"checkbox\",\n    name: \"terms\",\n    checked: inputForm.terms,\n    onChange: inputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: isButtonDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 1\n    }\n  }, \"Submit\"));\n};\n\nexport default Form;","map":{"version":3,"sources":["C:/Users/Brian/Documents/GitHub/User-Onboarding/user-onboarding/src/Form.js"],"names":["React","useState","useEffect","Yup","axios","Form","props","post","setPost","inputForm","setInputForm","name","email","password","terms","handleSubmit","event","preventDefault","then","formSchema","object","shape","string","required","min","boolean","oneOf","isButtonDisabled","setIsButtonDisabled","errors","setErrors","inputChange","persist","newFormData","target","type","checked","value","validateChange","isValid","valid","reach","validate","catch","err","length"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport * as Yup from 'yup';\r\nimport axios from \"axios\";\r\n\r\n\r\n  \r\n\r\n\r\nconst Form = (props) => {\r\n\r\n    const [post, setPost] = useState([])\r\n\r\n    \r\n    // const {inputForms, setInputForms} = props;\r\n\r\n\r\n    const [inputForm, setInputForm] = useState({name: \"\", email: \"\", password: \"\", terms: \"\"})\r\n    \r\n    // const handleChange = event => {\r\n\r\n    //     setInputForm({...inputForm, [event.target.name]: event.target.value});\r\n    // }\r\n\r\n    const handleSubmit = event => {\r\n\r\n        event.preventDefault();\r\n        // setInputForms([...inputForms, { ...inputForm, id: Date.now() }]);\r\n        // setInputForm([{name: \"\", email: \"\", password: \"\", terms: \"\"}]);\r\n        axios.post(\"https://reqres.in/api/users\", inputForm)\r\n        .then()\r\n\r\n\r\n    } \r\n\r\n\r\n\r\n    const formSchema = Yup.object().shape({\r\n       name: Yup\r\n       .string()\r\n       .required(\"Must input a Name.\"),\r\n        email: Yup\r\n          .string()\r\n          .email(\"Must be a valid email address.\")\r\n          .required(\"Must include email address.\"),\r\n        password: Yup\r\n          .string()\r\n          .min(6, \"Passwords must be at least 6 characters long.\")\r\n          .required(\"Password is Required\"),\r\n        terms: Yup\r\n          .boolean()\r\n          .oneOf([true], \"You must accept Terms and Conditions\")\r\n      });\r\n\r\n      const [isButtonDisabled, setIsButtonDisabled] = useState(true); \r\n    \r\n      const [errors, setErrors] = useState({\r\n        name: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        terms: \"\"\r\n      });\r\n\r\n      \r\n\r\n\r\n      const inputChange = event => {\r\n       \r\n        event.persist();\r\n\r\n        const newFormData = {\r\n\r\n            ...inputForm,\r\n            [event.target.name]: event.target.type === \"checkbox\" ? event.target.checked : event.target.value\r\n\r\n        };\r\n        validateChange(event);\r\n        setInputForm(newFormData);\r\n    \r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        formSchema.isValid(inputForm)\r\n        .then(valid => {\r\n\r\n            setIsButtonDisabled(!valid);\r\n        });\r\n\r\n    }, [inputForm]);\r\n    \r\n\r\n    const validateChange = event => {\r\n\r\n        Yup.reach(formSchema, event.target.name)\r\n        .validate(event.target.value)\r\n        .then( valid => {\r\n\r\n           setErrors({...errors, [event.target.name]: \"\"}) \r\n        })\r\n        .catch(err => setErrors({...errors, [event.target.name]: err.errors[0] }));\r\n    }\r\n\r\n\r\n\r\nreturn (\r\n\r\n<form onSubmit={handleSubmit}>\r\n\r\n<label htmlFor=\"name\"> \r\n    Name\r\n    <input id=\"name\" type=\"text\" name=\"name\" value={inputForm.name} onChange={inputChange} />\r\n    {errors.name.length > 0 ? (<p >{errors.name}</p>): null }\r\n</label>\r\n\r\n<label htmlFor=\"email\"> \r\n    Email\r\n    <input id=\"email\" type=\"email\" name=\"email\" value={inputForm.email} onChange={inputChange} />\r\n    {errors.email.length > 0 ? (<p>{errors.email}</p>): null}\r\n</label>\r\n\r\n<label htmlFor=\"passwoerd\"> \r\n    Password\r\n    <input id=\"password\" type=\"password\" name=\"password\" value={inputForm.password} onChange={inputChange} />\r\n    {errors.password.length > 0 ? (<p>{errors.password}</p>): null}\r\n</label>\r\n\r\n<label htmlFor=\"terms\"> \r\n    Click here if you agree to the T.O.S:\r\n    <input id=\"terms\" type=\"checkbox\" name=\"terms\"  checked={inputForm.terms} onChange={inputChange} />\r\n    {/* {errors.terms.length > 0 ? (<p>{errors.terms}</p>): null } */}\r\n</label>\r\n\r\n<button type=\"submit\" disabled={isButtonDisabled} >Submit</button>\r\n\r\n</form>\r\n\r\n\r\n)\r\n\r\n\r\n\r\n}\r\n\r\nexport default Form;"]},"metadata":{},"sourceType":"module"}